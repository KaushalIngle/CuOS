#! /usr/bin/python3

import argparse
import hashlib
import io
import logging
from pathlib import Path
import re
import shlex
import subprocess
import sys
import tempfile
from xdg.BaseDirectory import xdg_config_home  # type: ignore
from voluptuous import Any, Schema  # type: ignore
from voluptuous.validators import (  # type: ignore
    And, Date, IsDir, IsFile, Match, NotIn
)
import yaml

LOG_FORMAT = "%(levelname)s %(message)s"
log = logging.getLogger()

STAGES = [
    "base",
    "built-almost-final",
    "finalized-changelog",
    "reproduced-images",
    "built-iuks",
]

# pylint: disable=E1120
InputStr = And(str, NotIn(["FIXME"]))
IsBuildManifest = And(IsFile(), Match(re.compile(r".*[.]build-manifest$")))
IsIsoFile = And(IsFile(), Match(re.compile(r".*[.]iso$")))
IsImgFile = And(IsFile(), Match(re.compile(r".*[.]img$")))

STAGE_SCHEMA = {
    "base": {
        "tails_signature_key": InputStr,
        "isos": IsDir(),
        "artifacts": IsDir(),
        "master_checkout": IsDir(),
        "release_checkout": IsDir(),
        "version": InputStr,
        "previous_version": InputStr,
        "previous_stable_version": InputStr,
        "next_planned_major_version": InputStr,
        "second_next_planned_major_version": InputStr,
        "next_planned_bugfix_version": InputStr,
        "next_planned_version": InputStr,
        "next_potential_emergency_version": InputStr,
        "next_stable_changelog_version": InputStr,
        "release_date": Date(),
        "major_release": Any(0, 1),
        "dist": Any("stable", "alpha"),
        "release_branch": InputStr,
        "tag": InputStr,
        "previous_tag": InputStr,
        "website_release_branch": InputStr,
        "iuks_dir": IsDir(),
        "iuks_hashes": InputStr,
        "milestone": InputStr,
        "tails_signature_key_long_id": InputStr,
        "iuk_source_versions": InputStr,
    },
    "built-almost-final": {
        "almost_final_build_manifest": IsBuildManifest,
    },
    "finalized-changelog": {
        "source_date_epoch": int,
    },
    "reproduced-images": {
        "matching_jenkins_images_build_id": int,
    },
    "built-iuks": {
        "iso_path": IsIsoFile,
        "img_path": IsImgFile,
        "iso_sha256sum": str,
        "img_sha256sum": str,
        "iso_size_in_bytes": int,
        "img_size_in_bytes": int,
        "candidate_jenkins_iuks_build_id": int,
        "iuks_hashes": IsFile(),
    }
}
# pylint: enable=E1120


def git_repo_root():
    """Returns the root of the current Git repository as a Path object"""
    return Path(
        subprocess.check_output(["git", "rev-parse", "--show-toplevel"],
                                encoding="utf8").rstrip("\n"))


def sha256_file(filename):
    """Returns the hex-encoded SHA256 hash of FILENAME"""
    sha256 = hashlib.sha256()
    with io.open(filename, mode="rb") as input_fd:
        content = input_fd.read()
        sha256.update(content)
    return sha256.hexdigest()


class Config():
    """Load, validate, generate, and output Release Management configuration"""
    def __init__(self, stage: str):
        self.stage = stage
        self.config_files = [
            git_repo_root() / "config/release_management/defaults.yml"
        ] + list(
            (Path(xdg_config_home) / "tails/release_management").glob("*.yml"))
        self.data = self.load_config_files()
        self.data.update(self.generate_config())
        log.debug("Configuration:\n%s", self.data)
        self.validate()

    def load_config_files(self):
        """
        Load all relevant configuration files and return the resulting
        configuration dict
        """
        data = {}
        for config_file in self.config_files:
            log.debug("Loading %s", config_file)
            data.update(yaml.safe_load(open(config_file, 'r')))
        return data

    def generate_config(self):
        """
        Returns a dict of supplemental, programmatically-generated,
        configuration.
        """
        version = self.data["version"]
        tails_signature_key = self.data["tails_signature_key"]
        tag = version.replace("~", "-")
        release_branch = "testing" \
            if self.data["major_release"] == 1 \
            else "stable"
        iuks_dir = Path(self.data["isos"]) / "iuks/v2"
        iuk_hashes = Path(iuks_dir) / ("to_%s.sha256sum" % version)
        iuk_source_versions = subprocess.check_output(
            [git_repo_root() / "bin/iuk-source-versions", version],
            encoding="utf8").rstrip("\n")
        generated_config = {
            "release_branch": release_branch,
            "tag": tag,
            "previous_tag": self.data["previous_version"].replace("~", "-"),
            "website_release_branch": "web/release-%s" % tag,
            "iuk_source_versions": iuk_source_versions,
            "iuks_dir": str(iuks_dir),
            "iuks_hashes": str(iuk_hashes),
            "milestone": re.sub('~.*', '', self.data["version"]),
            "tails_signature_key_long_id": tails_signature_key[24:],
        }
        if self.stage == 'built-iuks':
            iso_path = Path(self.data["isos"]) \
                / ("tails-amd64-%s/tails-amd64-%s.iso" % (version, version))
            img_path = Path(self.data["isos"]) \
                / ("tails-amd64-%s/tails-amd64-%s.img" % (version, version))
            generated_config.update({
                "iso_path": str(iso_path),
                "img_path": str(img_path),
                "iso_sha256sum": sha256_file(iso_path),
                "img_sha256sum": sha256_file(img_path),
                "iso_size_in_bytes": iso_path.stat().st_size,
                "img_size_in_bytes": img_path.stat().st_size,
            })
        return generated_config

    def schema(self):
        """
        Returns a configuration validation schema function for
        the current stage
        """
        schema = {}
        for stage in STAGES:
            schema.update(STAGE_SCHEMA[stage])
            if stage == self.stage:
                break
        log.debug("Schema:\n%s", schema)
        return Schema(schema, required=True)

    def validate(self):
        """Checks that the configuration is valid, else raise exception"""
        schema = self.schema()
        schema(self.data)

    def to_shell(self):
        """
        Returns shell commands that, if executed, would export the
        configuration into the environment.
        """
        return "\n".join([
            "export %(key)s=%(val)s" % {
                "key": k.upper(),
                "val": shlex.quote(str(v))
            } for (k, v) in self.data.items()
        ]) + "\n"


def generate_boilerplate(stage: str):
    """Generate boilerplate for STAGE"""
    log.debug("Generating boilerplate for stage '%s'", stage)
    with open(git_repo_root() /
              ("config/release_management/templates/%s.yml" % stage)) as src:
        with open(
                Path(xdg_config_home) / "tails/release_management/current.yml",
                'a') as dst:
            dst.write(src.read())


def generate_environment(stage: str):
    """
    Prints to stdout the path to a file that contains commands
    that export the configuration for STAGE to the environment.
    """
    log.debug("Generating environment for stage '%s'", stage)
    config = Config(stage=stage)
    shell_snippet = tempfile.NamedTemporaryFile(delete=False)
    with open(shell_snippet.name, 'w') as shell_snippet_fd:
        shell_snippet_fd.write(config.to_shell())
    print(shell_snippet.name)


def validate_configuration(stage: str):
    """Validate configuration for STAGE, raise exception if invalid"""
    log.debug("Validating configuration for stage '%s'", stage)
    Config(stage=stage)
    log.info("Configuration is valid")


def main():
    """Command-line entry point"""
    parser = argparse.ArgumentParser(
        description="Query and manage Release Management configuration")
    parser.add_argument("--debug", action="store_true", help="debug output")
    subparsers = parser.add_subparsers(help="sub-command help", dest="command")

    parser_generate_boilerplate = subparsers.add_parser(
        "generate-boilerplate",
        help="Creates a configuration file template that you will fill")
    parser_generate_boilerplate.add_argument("--stage",
                                             type=str,
                                             action="store",
                                             default="base",
                                             help="")
    parser_generate_boilerplate.set_defaults(func=generate_boilerplate)

    parser_validate_configuration = subparsers.add_parser(
        "validate-configuration", help="Validate configuration files")
    parser_validate_configuration.add_argument("--stage",
                                               type=str,
                                               action="store",
                                               default="base",
                                               help="")
    parser_validate_configuration.set_defaults(func=validate_configuration)

    parser_generate_environment = subparsers.add_parser(
        "generate-environment",
        help="Creates a shell sourceable file with resulting environment")
    parser_generate_environment.add_argument("--stage",
                                             type=str,
                                             action="store",
                                             default="base",
                                             help="")
    parser_generate_environment.set_defaults(func=generate_environment)

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT)
    else:
        logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)

    if args.command is None:
        parser.print_help()
    else:
        args.func(stage=args.stage)


if __name__ == '__main__':
    sys.exit(main())
