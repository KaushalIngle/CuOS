#!/bin/sh

PREREQS="plymouth"

prereqs() { echo "$PREREQS"; }

case "$1" in
	prereqs)
	prereqs
	exit 0
	;;
esac

set -eu

# We will run this after each action that alters the device/partition
# in any way in an attempt to avoid various races that has caused this
# script to fail at various points. Examples:
#  * `partprobe /dev/sda` exiting before /dev/sda1 exists, causing
#    errors in subsequent commands attempting to use /dev/sda1
#  * `mlabel` complaining that it "could not read boot sector"
settle() {
    sync
    udevadm settle
    sync
}

# Print executed commands for debugging
# shellcheck disable=SC2154
if [ -n "$debug" ]; then
	set -x
fi

. /scripts/functions

if [ -z "${FSUUID:-}" ]; then
	echo "\$FSUUID is unset, probably because the boot medium is an ISO, and not a USB image. Skipping partitioning."
	exit 0
fi

# Wait for system partition
log_begin_msg "Waiting for system partition to become available"
success=
i=0
while [ "$i" -lt 300 ]; do
	if [ -b "/dev/disk/by-uuid/${FSUUID}" ]; then
		success=1
		break
	fi
	sleep 0.2
	i="$((i + 1))"
done

if [ -n "$success" ]; then
	log_end_msg
else
	log_failure_msg "Reached timeout waiting for system partition. Skipping partitioning."
	# The exit code is irrelevant in the current implementation of live-config
	exit 1
fi

# Get parent device
# XXX: We assume here that the parent device is also ready if the
# system partition is.
SYSTEM_PARTITION=$(readlink -f "/dev/disk/by-uuid/${FSUUID}")
PARENT_PATH=$(udevadm info --query=property --name="${SYSTEM_PARTITION}" \
	| sed -n '/^ID_PATH=/ s/^ID_PATH=// p')
PARENT_DEVICE=$(readlink -f "/dev/disk/by-path/${PARENT_PATH}")
DEVICE_NAME=$(basename "${PARENT_DEVICE}")


first_boot_repartition() {
	# Compute the new system partition size

	# in 512 bytes sectors
	DEVICE_SIZE=$(cat "/sys/block/${DEVICE_NAME}/size")

	DEVICE_SIZE_IN_GB=$(echo "scale=1; ${DEVICE_SIZE} / 2 / 1000 / 1000" | bc)
	DEVICE_SIZE_IN_MiB=$((DEVICE_SIZE / 2 / 1024))
	DEVICE_TOO_SMALL_ERROR_MESSAGE="Sorry, this USB stick is too small to run Tails (${DEVICE_SIZE_IN_GB} GB). Please use a USB stick of at least 8 GB. Press ENTER to shut down."

	if [ "${DEVICE_SIZE_IN_MiB}" -lt 7200 ]; then
		plymouth message --text="${DEVICE_TOO_SMALL_ERROR_MESSAGE}"
		plymouth watch-keystroke > /dev/null
		poweroff -f
	elif [ "${DEVICE_SIZE_IN_MiB}" -lt 14500 ]; then
		SYSTEM_PARTITION_SIZE=4096M
	else
		SYSTEM_PARTITION_SIZE=8192M
	fi


	# Update partition table. This includes the following operations:
	# * Move GPT backup header to the end of the device
	# * Set a random disk GUID and partition GUID
	# * Delete the old system partition
	# * Create a new system partition of size ${SYSTEM_PARTITION_SIZE}
	# * Set the partition label to "Tails"
	ESP_GUID="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
	log_begin_msg "Updating partition table"
	sgdisk \
		--move-second-header \
		--randomize-guids \
		--delete=1 \
		--new=1:0:+"${SYSTEM_PARTITION_SIZE}" \
		--typecode="1:${ESP_GUID}" \
		--change-name=1:Tails \
		"${PARENT_DEVICE}"
	settle
	log_end_msg

	# Tell the kernel to reload the partition table
	partprobe "${PARENT_DEVICE}"
	settle

	# fatresize overwrites the VBR, so we have to back it up to be able to
	# restore the boot code later
	dd if="${SYSTEM_PARTITION}" of=/tmp/vbr bs=512 count=1
	settle

	# Grow the filesystem
	# Note that fatresize resets partition attributes
	# fatresize uses "Mi" for MiB, so we have to append an "i".
	# Also, due to bugs in fatresize (tails/tails#18699) we
	# are limited to grow the filesystem to just below the limit.
	FS_SIZE="$((${SYSTEM_PARTITION_SIZE%M} - 2))"Mi
	fatresize --size="${FS_SIZE}" "${SYSTEM_PARTITION}"
	settle

	# Restore boot code overwritten by fatresize
	dd if=/tmp/vbr of="${SYSTEM_PARTITION}" bs=1 skip=90 seek=90 count=414
	settle

	# Restore JMP instruction which jumps to the bootcode
	dd if=/tmp/vbr of="${SYSTEM_PARTITION}" bs=3 count=1
	settle

	# Set a random filesystem UUID (aka. FAT "Volume ID" / "serial number")
	MTOOLS_SKIP_CHECK=1 mlabel -i "${SYSTEM_PARTITION}" -n ::Tails
	settle

	# Recompute CHS values for the hybrid MBR (see #16389) and set the
	# following attributes on the system partition (we have to set them
	# after running fatresize, because fatresize resets them):
	#   0: system partition
	#   2: legacy BIOS bootable
	#   60: read-only
	#   62: hidden
	#   63: do not automount
	sgdisk \
		--attributes=1:set:0  \
		--attributes=1:set:2  \
		--attributes=1:set:60 \
		--attributes=1:set:62 \
		--attributes=1:set:63 \
		--recompute-chs \
		"${PARENT_DEVICE}"
	settle

	# Tell the kernel to reload the partition table
	partprobe "${PARENT_DEVICE}"
	settle
}

repair_system_partition() {
	set +e
	fsck.fat -a -w -V -v "${SYSTEM_PARTITION}"
	FSCK_EXIT_CODE=$?
	set -e
	case "${FSCK_EXIT_CODE}" in
		0)
			_log_msg "fsck has detected no recoverable errors"
			;;
		1)
			_log_msg "fsck has fixed errors, deleting fsck recovery files"
			MOUNTPOINT=$(mktemp -d)
			mount -t vfat "${SYSTEM_PARTITION}" "${MOUNTPOINT}"
			find "${MOUNTPOINT}" \
			     -maxdepth 1 -type f -iname 'FSCK*.REC' \
			     -exec rm '{}' \;
			umount "${MOUNTPOINT}"
			;;
		*)
			_log_msg "fsck usage error. Ignoring and booting anyway."
			;;
	esac
}

# Check if this is first boot
GUID=$(sgdisk --print "${PARENT_DEVICE}" \
	| sed -n '/^Disk identifier (GUID)/ s/^Disk identifier (GUID): // p')

if [ "${GUID}" = "17B81DA0-8B1E-4269-9C39-FE5C7B9B58A3" ]; then
	_log_msg "This is the first boot, so repartitioning"
	first_boot_repartition
else
	_log_msg "This is not the first boot, so repairing filesystem"
	repair_system_partition
fi
