#!/usr/bin/python3
"""
wrapper over TCA.

elevates to sudo, then connect to whatever is needed and drop privileges again.
"""
import os
import sys
import gettext
from pathlib import Path
from subprocess import check_output, CalledProcessError
from logging import getLogger, basicConfig
from typing import List

from tailslib import LIVE_USERNAME
from tailslib.gnome import gnome_env_vars
from tailslib.greeter import get_greeter_variable_bool
from tailslib.persistence import (
    has_persistence,
    has_unlocked_persistence,
)

import tca.config

NETNS = "tca"
log = getLogger(__name__)


def main():
    if os.getuid() != 0:
        env_vars = []
        for var in ("DESKTOP_STARTUP_ID",):
            if var in os.environ:
                env_vars.append("%s=%s" % (var, os.environ[var]))
        cmd = ["sudo", "-n", *env_vars, __file__] + sys.argv[1:]
        log.debug("Running %s", cmd)
        os.execvpe(cmd[0], cmd, env=os.environ)
        return

    python_bin = "/usr/bin/python3"
    program = "/usr/lib/python3/dist-packages/tca/application.py"

    try:
        running_processes = int(
            check_output(
                [
                    "pgrep",
                    "--count",
                    "--uid",
                    LIVE_USERNAME,
                    "--full",
                    "--exact",
                    "%s %s" % (python_bin, program),
                ]
            )
        )
    except CalledProcessError as exc:
        if exc.returncode == 1:
            running_processes = 0
        else:
            raise
    if running_processes:
        print("TCA is already running", file=sys.stderr)
        return

    confdir = Path("/var/lib/tca/")
    conffile = confdir / "tca.conf"
    confdir.mkdir(mode=0o700, exist_ok=True)
    confdir.chmod(0o700)
    conffile.touch(mode=0o600)

    statedir = Path("/run/tca/")
    statefile = statedir / "tca.state"
    statedir.mkdir(mode=0o700, exist_ok=True)
    statedir.chmod(0o700)
    statefile.touch(mode=0o600)

    portalsock = "/run/tca-portal.sock"

    connect_drop = [
        "/usr/local/lib/connect-drop",
        "-c",
        "FILE:%s:r+" % conffile,
        "-c",
        "FILE:%s:r+" % statefile,
        "-c",
        "UNIX:%s" % portalsock,
        "--",
    ]
    ch_netns = ["/bin/ip", "netns", "exec", NETNS]
    runuser = ["/sbin/runuser", "-u", LIVE_USERNAME]
    # base bwrap sharing most of the system
    bwrap = ["bwrap", "--bind", "/", "/", "--proc", "/proc", "--dev", "/dev"]
    # passes data to us
    bwrap += [
        "--bind",
        os.path.join("/tmp/netns-specific/", NETNS),
        "/tmp/shared-with-me/",
    ]
    # hide data not for us
    bwrap += ["--tmpfs", "/tmp/netns-specific/"]
    inherit_vars = [
        "DESKTOP_STARTUP_ID",
        "NOTIFY_SOCKET",
    ]
    inherit_env = ["{}={}".format(var, os.environ.get(var, "")) for var in inherit_vars]
    envcmd = [
        "env",
        *gnome_env_vars(),
        *inherit_env,
        "AT_SPI_BUS_ADDRESS=unix:path=/tmp/shared-with-me/at.sock",
        "IBUS_ADDRESS=unix:path=/tmp/shared-with-me/ibus.sock",
        # uncomment this if you want to tweak the UI
        # 'GTK_DEBUG=interactive',
    ]
    if get_greeter_variable_bool("TAILS_NETWORK"):
        tcacmd = [python_bin, '-u', program]
    else:
        tcacmd = get_display_error_cmd()
        connect_drop = []

    # We run tca with several wrappers to accomplish our privilege-isolation-magic:
    # connect_drop: opens a privileged file and pass FD to new process
    # ch_netns: enter the new namespace
    # runuser: change back to unprivileged user
    # bwrap: this is probably the most complicated; what it does is sharing /tmp/netns-specific/$NETNS on
    # /tmp/shared-with-me/ and hide /tmp/netns-specific/ . The result is that TCA will be able to access
    # sockets that would otherwise be unreachable. See also tails-{a11y,ibus}-proxy-netns@.service
    # envcmd: set the "right" environment; this means getting all "normal" gnome variables, AND clarifying
    #         where is the {a11y,ibus} bus, which is related to bwrap

    args = (
        [
            *connect_drop,
            *ch_netns,
            *runuser,
            "--",
            *bwrap,
            *envcmd,
            *tcacmd,
            *sys.argv[1:],
        ]
        + (["--has-persistence"] if has_persistence() else [])
        + (["--has-unlocked-persistence"] if has_unlocked_persistence() else [])
    )

    log.info("%s", args)

    os.execv(args[0], args)


def get_display_error_cmd() -> List[str]:
    _ = gettext.gettext
    title = _(tca.config.APPLICATION_TITLE)
    textlines = [
        _("You turned on Offline Mode in the Welcome Screen."),
        _("It is impossible to connect to Tor in Offline Mode."),
        _("To connect to Tor and the Internet, restart Tails without Offline Mode."),
    ]
    zenity = [
        "zenity",
        "--error",
        "--no-wrap",
        "--title",
        title,
        "--text",
        "\n".join(textlines),
    ]
    return zenity


if __name__ == "__main__":
    basicConfig(level="DEBUG")
    main()
