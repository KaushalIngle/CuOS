#!/usr/bin/python3

import sys
import os.path
import time
import subprocess
from logging import getLogger, basicConfig
from argparse import ArgumentParser

import dbus
import systemd.daemon

log = getLogger(os.path.basename(__file__))


def get_parser():
    p = ArgumentParser()
    p.add_argument("--component", default="a11y", choices=["a11y", "ibus"])
    p.add_argument(
        "--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="DEBUG"
    )
    p.add_argument("netns")
    return p


def get_a11y_bus() -> str:
    bus = dbus.SessionBus()
    obj = bus.get_object("org.a11y.Bus", "/org/a11y/bus")
    iface = dbus.Interface(obj, dbus_interface="org.a11y.Bus")
    response = iface.GetAddress()
    return str(response)


def get_ibus_bus() -> str:
    address = subprocess.check_output(["/usr/bin/ibus", "address"]).decode('utf-8')
    path, guid = address.split(",")
    return path


def netns_exists(name: str) -> bool:
    return os.path.exists(os.path.join("/var/run/netns", name))


def wait_netns(name: str, sleep_time=1):
    notified = False
    while not netns_exists(name):
        if not notified:
            log.info("Waiting for netns %s to be ready", name)
        time.sleep(1)


def systemd_ready():
    try:
        systemd.daemon.notify('READY=1')
    except OSError:
        log.error("error notifying systemd of readiness")
    else:
        log.info("systemd was notified")


def main():
    args = get_parser().parse_args()
    basicConfig(level=args.log_level)
    wait_netns(args.netns)
    log.debug("get address")
    if args.component == "a11y":
        backend_address = get_a11y_bus()
    else:
        backend_address = get_ibus_bus()
    log.debug("address got! %s", backend_address)

    dirname = os.path.join("/tmp/netns-specific/", args.netns)
    os.makedirs(dirname, exist_ok=True)
    dest_basename = 'at.sock' if args.component == 'a11y' else 'ibus.sock'
    dest_bus_path = os.path.join(dirname, dest_basename)
    log.debug("Binding at %s", dest_bus_path)
    if os.path.exists(dest_bus_path):
        os.unlink(dest_bus_path)

    args = ["xdg-dbus-proxy", backend_address, dest_bus_path]
    log.debug("Running %r", args)
    # we fork-exec to handle systemd notifications. though not strictly needed, they are nice!
    p = subprocess.Popen(args)
    log.debug("process started; waiting for socket to become available")
    for i in range(60):
        if os.path.exists(dest_bus_path):
            log.debug("Ready (after %d seconds)", i)
            systemd_ready()
            break
        else:
            time.sleep(1)
    else:
        print("Error: the destination socket didn't show up", file=sys.stderr)
        p.terminate()
        sys.exit(1)

    try:
        p.communicate()
    except KeyboardInterrupt:
        # this except clause will handle SIGINT, but not other signals
        # we should probably explicitly do that!
        p.kill()
        log.debug("Killed %s", args[0])
    return


if __name__ == "__main__":
    main()
