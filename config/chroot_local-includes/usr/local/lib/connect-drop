#!/usr/bin/python3
'''

General description
======================

This command will:
    - acquire some file descriptors (network socket or open file)
    - change user (setuid)
    - run an *untrusted* command ($CMD from now on)

The command will then be able to use the intended sockets, but not to use root
privileges to do any other thing.

Why changing user is optional
===============================

If you run connect-drop without --user, $CMD will still run with root
privileges, so clearly this will not provide any security guarantee, since we
don't trust $CMD.
So why is it possible to run connect-drop without --user? Well, sometimes
you want not only to change uid, but also do more things: change network
namespace, change gid, or other kind of restrictions, before dropping
privileges.
So, when --user is not used, it is assumed that the caller will drop privileges
in other ways. /usr/local/bin/tca is a good example of this case

Threat model
=============

Let's assume that $CMD is controlled by an adversary. We want it to be able
to use all the FDs we passed it.
We want it to be able to open new FDs based on the privileges of the user it is
running as.
We *don't* want it to:
    - open a file that only root can open
    - connect to an IP that only root can connect to (because of iptables -m
      owner rules)
    - connect to a UNIX domain socket that only root can connect to
'''
from argparse import ArgumentParser, ArgumentTypeError
from pathlib import Path
import logging
import pwd
import os
import socket
import sys
import time

try:
    import prctl
except ImportError:
    print("WARNING: you don't have prctl package installed, this might be insecure!!!", file=sys.stderr)
    PRCTL = False
else:
    PRCTL = True

def get_parser():
    p = ArgumentParser()
    p.add_argument(
        "--connect",
        "-c",
        action="append",
        default=[],
        dest="connections",
        type=SocketSpec,
        help="This can be something like TCP:example.com:80 or "
        "UNIX:/path/to/my.sock or TCP6:example.org:25",
    )
    p.add_argument("-u", "--user")
    p.add_argument("cmd")

    return p


class SocketSpec:
    def __init__(self, spec: str):
        self.fd = None
        self.family = None
        self.type = socket.SOCK_STREAM
        self.address = None
        self.mode = None

        t = spec.split(":")

        sock_type = t[0]
        if sock_type == "TCP":
            self.family = socket.AF_INET
        elif sock_type == "TCP6":
            self.family = socket.AF_INET6
        elif sock_type == "UNIX":
            self.family = socket.AF_UNIX
        elif sock_type == "FILE":
            self.family = "FILE"
            self.type = "FILE"
        else:
            raise ArgumentTypeError("Invalid socket type `%s`" % sock_type)

        if self.family == socket.AF_UNIX:
            if len(t) != 2:
                raise ArgumentTypeError(
                    "Invalid socket form; UNIX type have exactly one addr part"
                )
            self.address = t[1]
        elif self.family == "FILE":
            if len(t) != 3:
                raise ArgumentTypeError(
                    "Invalid socket form; FILE type must have the form FILE:path:mode"
                )
            self.address = t[1]
            self.mode = t[2]
        else:
            if len(t) != 3:
                raise ArgumentTypeError(
                    "Invalid socket form; TCP type must have the form TCP:host:port"
                )
            self.address = (t[1], int(t[2]))

    def create(self):
        if self.is_file():
            self.buf = open(self.address, self.mode)
            self.fd = self.buf.fileno()
            return self.buf
        else:
            s = socket.socket(
                family=self.family, type=self.type, proto=0, fileno=self.fd
            )
            self.socket = s
            self.fd = s.fileno()
            return s

    def is_file(self):
        return self.family == "FILE"


def main():
    # Parsing arguments require a little hack to work around argparse annoying issue:
    #  Only the first double-dash (--) separator is kept. They are however important in the very long command
    #  lines run when executing programs inside netns.
    # This hack allows to get the currect behaviour for a well-formed argument list, at the expense of good
    # error handling when an invalid cmdline is passed to connect-drop.
    args, cmd_args = get_parser().parse_known_args()
    if cmd_args and cmd_args[0] == '--':
        del cmd_args[0]
    args.cmd_args = cmd_args

    # this list is needed to avoid that GC will also call close() on sockets
    sockets = []
    for addr in args.connections:
        s = addr.create()
        if not addr.is_file():
            s.connect(addr.address)
        os.set_inheritable(s.fileno(), True)
        logging.debug("fd=%d [%s]", s.fileno(), addr)
        sockets.append(s)

    if args.user:
        user = pwd.getpwnam(args.user)

        if PRCTL:
            # this will drop all capabilities
            prctl.capbset.limit()

        # the order of this is critical!
        # See "The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities" 7.5.4
        os.setgroups(os.getgrouplist(user.pw_name, user.pw_gid))
        os.setgid(user.pw_gid)
        os.setuid(user.pw_uid)
        os.umask(0o077)
        if PRCTL:
            prctl.cap_inheritable.limit()
            prctl.cap_permitted.limit()
            prctl.cap_effective.limit()
        home = user.pw_dir
    else:
        home = str(Path.home())

    os.execvpe(
        args.cmd,
        [args.cmd] + args.cmd_args,
        env=dict(
            # Yes, the child process could enumerate the open fd, but this is probably clearer
            # especially, we don't want to rely on the fact that FD always start from 3 and are incremental
            INHERIT_FD=",".join(str(s.fileno()) for s in sockets),
            HOME=home,
        ),
    )


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
